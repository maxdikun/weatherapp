// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package gen

import (
	"context"

	"github.com/google/uuid"
)

const insertUser = `-- name: InsertUser :one
INSERT INTO users (id, login, password)
VALUES ($1, $2, $3)
RETURNING id, login, password
`

type InsertUserParams struct {
	ID       uuid.UUID
	Login    string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.ID, arg.Login, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Login, &i.Password)
	return i, err
}

const selectUserById = `-- name: SelectUserById :one
SELECT id, login, password
FROM users
WHERE id = $1
`

func (q *Queries) SelectUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, selectUserById, id)
	var i User
	err := row.Scan(&i.ID, &i.Login, &i.Password)
	return i, err
}

const selectUserByLogin = `-- name: SelectUserByLogin :one
SELECT id, login, password
FROM users
WHERE login = $1
`

func (q *Queries) SelectUserByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRow(ctx, selectUserByLogin, login)
	var i User
	err := row.Scan(&i.ID, &i.Login, &i.Password)
	return i, err
}
